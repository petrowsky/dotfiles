" Inspiration (use gx when on the url to open) {{{
"
"
" What's hot on Github
" https://github.com/trending?l=vim
"
" Load the raw.* files into a buffer using gf.
"
" ThoughtBot
" https://github.com/thoughtbot/dotfiles/blob/master/vimrc
"   https://raw.githubusercontent.com/thoughtbot/dotfiles/master/vimrc
"
" NickNisi
" https://github.com/nicknisi/dotfiles/blob/master/config/nvim/init.vim
"   https://raw.githubusercontent.com/nicknisi/dotfiles/master/config/nvim/init.vim
"
" YADR
" https://github.com/skwp/dotfiles
"
" Amir Salihefendic
" https://github.com/amix/vimrc
"   https://raw.githubusercontent.com/amix/vimrc/master/vimrcs/extended.vim
"
" Bailey Ling
" https://github.com/bling/dotvim
"   https://raw.githubusercontent.com/bling/dotvim/master/vimrc
"
" Jan Christoph Ebersbach
" https://github.com/jceb/vimrc
"
" Derek Wyatt
" https://github.com/derekwyatt/vim-config/blob/master/vimrc
"
" }}}

" Customization before loading
if filereadable(expand("~/.vimrc.before"))
   source ~/.vimrc.before
endif

function! Preserve(command)
    " preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! StripTrailingWhitespace()
    call Preserve("%s/\\s\\+$//e")
endfunction

" ---< YouCompleteMe >---
" Build function for YCM taken from https://github.com/junegunn/vim-plug#post-update-hooks
" This needs to be before plugins are loaded when using YouCompleteMe.
function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --clang-completer
  endif
endfunction

" TABLE OF CONTENTS
"------------------------------------------------------------------------------
" GENERALSTUFF
" INSERTMODE
" DISPLAYSTUFF
" TABSTUFF
" WINDOWSTUFF
" SPELLINGSTUFF
" SEARCHINGSTUFF
" FILESTUFF
" DEVSTUFF
" PLUGINSTUFF
" MISCMAPPINGS


set nocompatible      " Because vim is better.
set path+=**          " Make :find work recursively

" Load plugins
if filereadable(expand("~/.vim/plugins.vim"))
    source ~/.vim/plugins.vim
endif

set hidden            " Don't kill my buffers.

" Leader key
let mapleader = " "

" Because editing ~/.vimrc happens a lot.
nnoremap <leader>conf :e! ~/.dotfiles/vim/vimrc.symlink<cr>
nnoremap <leader>src :source $MYVIMRC<cr>

" Because changing plugins happens sometimes.
nnoremap <leader>plug :e! ~/.vim/plugins.vim<cr>

" Using the OS clipboard is nice
set clipboard=unnamed


" GENERALSTUFF {{{
"------------------------------------------------------------------------------

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile
set history=1000
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set autowrite     " Automatically :write before running commands
set autoread      " Detect when files are modified
set wildmenu      " Enhanced completion is nicer
set wildmode=list:longest,full

if !empty(&viminfo)
    set viminfo^=!
endif
set sessionoptions-=options

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif
" }}}

" INSERTMODE {{{
"------------------------------------------------------------------------------
"
" Esc key is too far. Let's make it easy.
" For when I'm not using an emulator with key mapping
inoremap <C-J> <Esc>

" When using iTerm2, map global key of ctrl-return to ❤
" Heart char is U+2764. When sending a heart, it will escape you!
inoremap ❤ <Esc>
" You ARE remapping the Caps Lock key to Control right?

" Because it's always good to save - easily.
inoremap <C-s> <C-o>:update<CR>
noremap <C-s> :update<CR>

" Use one space, not two, after punctuation.
set nojoinspaces

" Familiar moving while typing.
inoremap <C-h> <left>
inoremap <C-l> <right>
" }}}

" VISUALMODE {{{
"------------------------------------------------------------------------------
vnoremap <C-j> <esc>
vnoremap < <gv
vnoremap > >gv
"}}}

" DISPLAYSTUFF {{{
"------------------------------------------------------------------------------
if &term == 'xterm' || &term == 'screen'
    set t_Co=256
endif

let base16colorspace=256
set background=dark
" See color scheme options at this url.
" http://chriskempson.com/projects/base16/
colorscheme base16-bright

" Overrides to colorscheme based on preferences
function! s:patch_color_scheme()
    " hi Normal guibg=#16191E
    hi LineNr guibg=#20232A
    hi ColorColumn ctermbg=234 guibg=#20232A
    " Coloring for eol, extends and precedes
    hi NonText guifg=#3C4459
    " Coloring for nbsp, space, tab and trail
    hi SpecialKey guifg=#3C4459
    " Matching search hits to my airline theme.
    hi Search term=reverse ctermfg=8 ctermbg=3 guifg=#242424 guibg=#92bd48
endfunction

" autocmd! ColorScheme base16-bright call s:patch_color_scheme()
call s:patch_color_scheme()

" Display of width and line numbering
set textwidth=0
set colorcolumn=+1
set nowrap
set nolist
set linespace=3

set number numberwidth=5
"set relativenumber
set scrolloff=3    " Because seeing more context is a nice thing.
set ttyfast
set visualbell
set shortmess=fxoO

" Display whitespace stuff
set list listchars=tab:»·,trail:·,nbsp:·,eol:¬

" If Airline is installed then this will be overwritten by plugin settings
if has('statusline')
    set laststatus=2
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

" Always use vertical diffs
set diffopt+=vertical

" Font function (used by Goyo and gui)
function! MyGuiFont()
    "set guifont=DejaVuSansMono\ Nerd\ Font:h16,Menlo\ Regular:h14,Consolas\ Regular:h14,Courier\ New\ Regular:h14
    set guifont=UbuntuMono\ Nerd\ Font:h18,Menlo\ Regular:h14,Consolas\ Regular:h14,Courier\ New\ Regular:h14
endfunction

" GUI settings
if has('gui_running')
    set guioptions-=T           " Remove the toolbar
    call MyGuiFont()
endif
" }}}

" TABSTUFF {{{
"------------------------------------------------------------------------------
set autoindent     " because code should be indented
set expandtab      " insert spaces instead of <Tab>
set smarttab       " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4      " the visible width of tabs
set softtabstop=4  " edit as if the tabs are 4 characters wide
set shiftwidth=4   " number of spaces to use for indent and unindent
set shiftround     " round indent to a multiple of 'shiftwidth'
set completeopt+=longest,menuone
set showtabline=2  " always show the tabline

" When we want a real tab we can use Shift-Tab. (Use '.' repeat for multiple)
inoremap <S-Tab> <C-V><Tab>

" Tab navigation/manipulation. Just like h,j,k,l - but with 't'
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabprev<CR>
nnoremap tk  :tabnext<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnew<CR>
nnoremap tm  :tabm<Space>
nnoremap tx  :tabclose<CR>

" }}}

" WINDOWSTUFF (navigation) {{{
"------------------------------------------------------------------------------

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window/split movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Switch between the last two files
nnoremap <leader><leader> <c-^>


" Faster scrolling with Shift (and replace J[oin] with leader)
nnoremap <S-j> 5<C-e>
nnoremap <S-k> 5<C-y>
nnoremap <leader>j J

" Faster buffer switching - but still enjoy unimpaired.
nnoremap <S-h> :bprev<cr>
nnoremap <S-l> :bnext<cr>

" Just like the little "x" on windows. ;)
" nnoremap <C-x> :bd<CR>

" Resizing windows is a bit easier with mappings.
nnoremap <silent> <leader>[ :exe "vertical resize -10"<cr>
nnoremap <silent> <leader>] :exe "vertical resize +10"<cr>

" }}}

" SPELLINGSTUFF {{{
"------------------------------------------------------------------------------

" Spelling file can be symlinked
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell
" }}}

" SEARCHINGSTUFF {{{
"------------------------------------------------------------------------------

set ignorecase  " case insensitive searching
set smartcase   " case-sensitive if expression contains a capital letter
set hlsearch    " highlight search matches
set incsearch   " set incremental search, like modern browsers
set lazyredraw  " don't redraw while executing macros
set magic       " Set magic on, for regex
set showmatch   " show matching braces
set matchtime=2 " how many tenths of a second to blink

" Search within file to quickfix
map <leader>s :vimgrep // <C-r>%<C-b><right><right><right><right><right><right><right><right><right>
map <leader>/ :vimgrep // **/*<left><left><left><left><left><left>

" Find/Replace value under word.
nnoremap <leader>r :%s/\<<C-r><C-w>\>/

" Better regexing
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v
nnoremap :s/ :s/\v

" find current word in quickfix
nnoremap <leader>fw :execute "vimgrep ".expand("<cword>")." %"<cr>:copen<cr>
" find last search in quickfix
nnoremap <leader>ff :execute 'vimgrep /'.@/.'/g %'<cr>:copen<cr>
" }}}

"FILESTUFF {{{
"------------------------------------------------------------------------------

filetype indent plugin on
set encoding=utf-8

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepformat=%f:%l:%c:%m

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Change the current working directory to the current buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Fix line endings - manual
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Trim trailing whitespace just before save
autocmd BufWritePre * call StripTrailingWhitespace()
" }}}

" DEVSTUFF {{{
"------------------------------------------------------------------------------

" Like a faster update time for plugins like GitGutter
set updatetime=800
let g:ycm_allow_changing_updatetime = 0

" Vdebug
let g:vdebug_options={"port" : 9001}

" Mapping key familiar to debugging in other apps
"<F1> is help
"<F2> is reserved (code cursor for videos)
"<F3> is reserved (os zooming for videos)
let g:vdebug_keymap = {
    \ "run_to_cursor" : "<F4>",
    \ "step_over" : "<F5>",
    \ "step_into" : "<F6>",
    \ "step_out" : "<F7>",
    \ "run" : "<F8>",
    \ "close" : "<F9>",
    \ "detach" : "<F10>",
    \ "set_breakpoint" : "<F11>",
    \ "eval_under_cursor" : "<F12>",
    \ "get_context" : "<F13>",
    \ "eval_visual" : "<Leader>e",
    \}
" Refreshing the (Safari) browser window
noremap <leader><C-r> :silent
            \ !osascript -e 'tell application "Safari"
            \ to set URL of current tab of front window to
            \ (URL of current tab of front window)'<CR>:redraw!<CR>

" Using par executable for wrapping stuff - cleaner!
if executable("/usr/local/bin/par")
    set formatprg=par\ -w40
endif
" }}}

" PLUGINSTUFF {{{
"------------------------------------------------------------------------------

" ---< CtrlP >---
map <C-f> :CtrlPMRU<CR>
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

set wildignore+=*.DS_STORE,*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/node_modules/*
set wildignore+=.git,.svn,.hg

" The following only applies when ag (the_silver_searcher) is not installed.
let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/]\.(git|hg|svn|idea)$',
    \ 'file': '\v\.DS_Store$'
    \ }

" ---< NerdTree >---
" Because jumping back in the tag stack is great for help
" and we're hijacking <c-t> for NERDTree sidebar.
nnoremap <C-[> <C-t>
map <C-t> :NERDTreeToggle<CR>
let NERDTreeWinSize=40
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=0
let NERDTreeShowLineNumbers=1
let NERDTreeChDirMode=0
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.git','\.hg']

" ---< Sessions >---
let g:session_autosave = 'no'
let g:session_autoload = 'no'
"
" ---< Airline >---

" Thanks to this, we can see the decimal value under the cursor
" http://derekwyatt.org/2015/07/27/getting-character-under-cursor-in-vim/
function! CursorChar()
    return char2nr(matchstr(getline('.'), '\%' . col('.') . 'c.'))
endfunction
" Changing what section_z shows to include value under cursor.
" let g:airline_section_z .= 'not implemented yet'

" Make sure to use a patched font https://github.com/ryanoasis/nerd-fonts
if has('macunix')
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_powerline_fonts=1
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''

    let g:airline#extensions#tabline#enabled = 1
endif
"
" Let's only show the filename - we typically know where we are.
let g:airline#extensions#tabline#fnamemod = ':t'

" ---< Syntastic >---
" Setting up some code checking for Drupal development. This is set by the
" vim drupal plugin if install (see https://www.drupal.org/project/vimrc)
let g:syntastic_php_phpcs_args="--standard=Drupal --extensions=php,module,inc,install,test,profile,theme"

" ---< Tagbar >---
nnoremap <leader>t :TagbarToggle<CR>

" ---< Tabular >---
" https://github.com/godlygeek/tabular
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
if exists(":Tabularize")
    nmap <Leader>>& :Tabularize /&<CR>
    vmap <Leader>>& :Tabularize /&<CR>
    nmap <Leader>>= :Tabularize /=<CR>
    vmap <Leader>>= :Tabularize /=<CR>
    nmap <Leader>>: :Tabularize /:<CR>
    vmap <Leader>>: :Tabularize /:<CR>
    nmap <Leader>>:: :Tabularize /:\zs<CR>
    vmap <Leader>>:: :Tabularize /:\zs<CR>
    nmap <Leader>>, :Tabularize /,<CR>
    vmap <Leader>>, :Tabularize /,<CR>
    nmap <Leader>><Bar> :Tabularize /<Bar><CR>
    vmap <Leader>><Bar> :Tabularize /<Bar><CR>
endif

" ---< ShowMarks >---
" Tell showmarks to not include the various brace marks (),{}, etc
let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY"

" ---< Bufkill >---
" Because keeping your windows in place is less disorienting
nnoremap <leader>bd :BD<CR>

" ---< vim-textobj-quote >---
" Support for curly quotes on certain file types.
augroup textobj_quote
    autocmd!
    autocmd FileType markdown call textobj#quote#init()
    autocmd FileType textile call textobj#quote#init()
    autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END

" ---< UltiSnips >---
" Because of YouCompleteMe UltiSnips needs different mappings.
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger = "<cr>"
let g:UltiSnipsJumpBackwardTrigger="<s-cr>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetsDir='~/.vim/snippets'

" ---< Fugitive >---
" Git time savers
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>

" ---< vim-indent-guides >---
let g:indent_guides_start_level=1
let g:indent_guides_guide_size=1
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=4

" ---< Startify >---
let g:startify_show_sessions = 1
let g:startify_session_dir = '~/.vim/sessions'
let g:startify_change_to_vcs_root = 1
"
" ---< Goyo >---
let g:goyo_width=80
function! s:goyo_enter()
    setlocal linebreak
    setlocal wrap
    setlocal wrapmargin=0
    setlocal textwidth=0
    setlocal spell
  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
    set guifont=UbuntuMono\ Nerd\ Font:h24,Menlo\ Regular:h24,Consolas\ Regular:h24,Courier\ New\ Regular:h24
  elseif exists('$TMUX')
    silent !tmux set status off
  endif
endfunction

function! s:goyo_leave()
    setlocal nolinebreak
    setlocal nowrap
    setlocal textwidth=80
    setlocal nospell
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=3
    call MyGuiFont()
  elseif exists('$TMUX')
    silent !tmux set status on
  endif
  " source $MYVIMRC
  " redraw!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" ---< Howdoi >---
" [i]nsert a snippet using howdoi
let g:howdoi_map = '<c-i>'

" ---< Gundo >---
nnoremap <leader>u :GundoToggle<CR>

" ---< Rainbow Parentheses >---
nnoremap <leader>( :RainbowParenthesesToggle<CR>

" }}}

" MISCMAPPINGS {{{
"------------------------------------------------------------------------------

" Filter the last search into register 'a' then replace the current buffer
" https://stackoverflow.com/questions/4503748/remove-everything-except-regex-match-in-vim
nnoremap <leader># :let @a=""\|%s//\=setreg('A', submatch(0), 'l')/g\|%d _\|pu a\|0d _

" Straighten quotes
nnoremap <leader>" :%s/\(“\\|”\)/"/g<CR>
nnoremap <leader>' :%s/\(‘\\|’\)/'/g<CR>

" Wrap all lines in file within quotes
nnoremap <leader>w :%s/.*/"&"<CR>:noh<CR>

" Open markdown docs within Marked2.app
noremap <leader>p :MarkedOpen<CR>

" Beautify JSON
nnoremap <leader>J :%!python -m json.tool<CR>:set ft=json<CR>

" Insert lines
nnoremap <cr> o<esc>
nnoremap <S-cr> O<esc>

" A quick way to turn off highlighting
map <silent> <leader><cr> :noh<cr>

" Sudo, make me a sandwich - (root write access)
cmap w!! w !sudo tee % >/dev/null

" Sorting css/scss
autocmd FileType css,scss nnoremap <silent> <leader>S vi{:sort<CR>

nmap <leader><f1> :call MyGuiFont()<cr>
nmap <leader><f2> :set guifont=UbuntuMono\ Nerd\ Font:h44<cr>

" }}}

" Experimental stuff
" Open iTerm to the current working directory
noremap <leader>it :silent
            \ !osascript -e 'tell application "iTerm"
            \     activate
            \     try
            \         set _session to current session of current terminal
            \     on error
            \         set _term to (make new terminal)
            \         tell _term
            \             launch session "Default"
            \             set _session to current session
            \         end tell
            \     end try
            \     tell _session
            \         write text "cd " & "/Users/matt/.dotfiles/" & ";clear;"
            \     end tell
            \     activate
            \ end tell'

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

